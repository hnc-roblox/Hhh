-- TaoCoDepTraiKhong.lua (obfuscated via base64 + runtime decoder)
-- Yêu cầu: executor có loadstring (Luau)
do
  local __b64 = [[LS0gTG9jYWxTY3JpcHQ6IFN0YXJ0ZXJHdWkKbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIExpZ2h0aW5nID0gZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpCmxvY2FsIGxwID0gUGxheWVycy5Mb2NhbFBsYXllcgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gVOG6oW8gaGnhu4d1IOG7qW5nIG3hu50gKyBHVUkKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gVOG6oW8gQmx1ckVmZmVjdCAoa2jDtG5nIMSR4bulbmcgdsOgbyBibHVyIHPhurVuIGPDsyBraMOhYykKbG9jYWwgYmx1ciA9IEluc3RhbmNlLm5ldygiQmx1ckVmZmVjdCIpCmJsdXIuTmFtZSA9ICJITkNfUXVlc3Rpb25CbHVyIgpibHVyLlNpemUgPSAwCmJsdXIuUGFyZW50ID0gTGlnaHRpbmcKCi0tIFThuqFvIFNjcmVlbkd1aQpsb2NhbCBndWkgPSBJbnN0YW5jZS5uZXcoIlNjcmVlbkd1aSIpCmd1aS5OYW1lID0gIkhOQ19RdWVzdGlvbkd1aSIKZ3VpLlJlc2V0T25TcGF3biA9IGZhbHNlCmd1aS5JZ25vcmVHdWlJbnNldCA9IHRydWUKZ3VpLlpJbmRleEJlaGF2aW9yID0gRW51bS5aSW5kZXhCZWhhdmlvci5TaWJsaW5nCmd1aS5QYXJlbnQgPSBscDpXYWl0Rm9yQ2hpbGQoIlBsYXllckd1aSIpCgotLSBM4bubcCBt4budIChkaW0pIHBo4bunIHRvw6BuIG3DoG4gaMOsbmgKbG9jYWwgZGltID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCmRpbS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCkKZGltLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjQgLS0gbcOgbiBow6xuaCBy4bqldCBt4budCmRpbS5TaXplID0gVURpbTIuZnJvbVNjYWxlKDEsIDEpCmRpbS5QYXJlbnQgPSBndWkKCi0tIEtodW5nIGPDonUgaOG7j2kKbG9jYWwgYm94ID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCmJveC5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQpib3guUG9zaXRpb24gPSBVRGltMi5mcm9tU2NhbGUoMC41LCAwLjUpCmJveC5TaXplID0gVURpbTIubmV3KDAsIDQyMCwgMCwgMTgwKQpib3guQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwLCAyMCwgMjApCmJveC5QYXJlbnQgPSBkaW0KCmxvY2FsIHVpQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIGJveCkKdWlDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTYpCgpsb2NhbCB1aVN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBib3gpCnVpU3Ryb2tlLlRoaWNrbmVzcyA9IDIKdWlTdHJva2UuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQp1aVN0cm9rZS5UcmFuc3BhcmVuY3kgPSAwLjMKCi0tIE7hu5lpIGR1bmcgY8OidSBo4buPaQpsb2NhbCB0aXRsZSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKdGl0bGUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKdGl0bGUuU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjQsIDAsIDYwKQp0aXRsZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAxMiwgMCwgMTApCnRpdGxlLlRleHQgPSAiSE5DIFJvYmxveCBjw7MgxJHhurlwIHRyYWkga2jDtG5nPyIKdGl0bGUuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCnRpdGxlLlRleHRTaXplID0gMjQKdGl0bGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCnRpdGxlLlRleHRXcmFwcGVkID0gdHJ1ZQp0aXRsZS5QYXJlbnQgPSBib3gKCi0tIE5ow7NtIDIgbsO6dApsb2NhbCBidXR0b25zSG9sZGVyID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCmJ1dHRvbnNIb2xkZXIuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKYnV0dG9uc0hvbGRlci5TaXplID0gVURpbTIubmV3KDEsIC0yNCwgMCwgNjApCmJ1dHRvbnNIb2xkZXIuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMTIsIDAsIDEwMCkKYnV0dG9uc0hvbGRlci5QYXJlbnQgPSBib3gKCmxvY2FsIHVpTGlzdCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IiwgYnV0dG9uc0hvbGRlcikKdWlMaXN0LkZpbGxEaXJlY3Rpb24gPSBFbnVtLkZpbGxEaXJlY3Rpb24uSG9yaXpvbnRhbAp1aUxpc3QuSG9yaXpvbnRhbEFsaWdubWVudCA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXIKdWlMaXN0LlZlcnRpY2FsQWxpZ25tZW50ID0gRW51bS5WZXJ0aWNhbEFsaWdubWVudC5DZW50ZXIKdWlMaXN0LlBhZGRpbmcgPSBVRGltLm5ldygwLCAxMikKCi0tIE7DunQgaGVscGVyCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZUJ0bih0ZXh0KQogICAgbG9jYWwgYiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCiAgICBiLlNpemUgPSBVRGltMi5uZXcoMCwgMTIwLCAwLCA0MikgLS0g4oCcaGFpIMO0IG5o4buP4oCdCiAgICBiLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzNSwgMzUsIDM1KQogICAgYi5UZXh0ID0gdGV4dAogICAgYi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKICAgIGIuVGV4dFNpemUgPSAxOAogICAgYi5Gb250ID0gRW51bS5Gb250LkdvdGhhbUJvbGQKICAgIGIuQXV0b0J1dHRvbkNvbG9yID0gdHJ1ZQogICAgYi5QYXJlbnQgPSBidXR0b25zSG9sZGVyCgogICAgbG9jYWwgYyA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBiKQogICAgYy5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCAxMCkKCiAgICBsb2NhbCBzID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIGIpCiAgICBzLlRoaWNrbmVzcyA9IDEuNQogICAgcy5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyMDApCiAgICBzLlRyYW5zcGFyZW5jeSA9IDAuMjUKCiAgICByZXR1cm4gYgplbmQKCmxvY2FsIGJ0bk5vID0gY3JlYXRlQnRuKCJLaMO0bmciKQpsb2NhbCBidG5ZZXMgPSBjcmVhdGVCdG4oIkPDsyIpCgotLSBUd2VlbiBibHVyIHbDoG8gY2hvIG3GsOG7o3QKdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICBmb3IgaSA9IDEsIDI0IGRvCiAgICAgICAgYmx1ci5TaXplID0gaQogICAgICAgIHRhc2sud2FpdCgxLzEyMCkKICAgIGVuZAplbmQpCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBIw6BuaCB2aSBuaOG6pW4gbsO6dAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpsb2NhbCBjbGlja2VkID0gZmFsc2UKCmxvY2FsIGZ1bmN0aW9uIGNsZWFudXBVSSgpCiAgICAtLSDhuqhuIG1lbnUgJiB0cuG6oyBtw6BuIGjDrG5oIHbhu4EgYsOsbmggdGjGsOG7nW5nIHRyxrDhu5tjIGtoaSBjaOG6oXkgaMOgbmggxJHhu5luZwogICAgaWYgZ3VpIHRoZW4gZ3VpLkVuYWJsZWQgPSBmYWxzZSBlbmQKICAgIC0tIEdp4bqjbSBt4budIGThuqduCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBmb3IgaSA9IGJsdXIuU2l6ZSwgMCwgLTIgZG8KICAgICAgICAgICAgYmx1ci5TaXplID0gaQogICAgICAgICAgICB0YXNrLndhaXQoMS8xMjApCiAgICAgICAgZW5kCiAgICAgICAgaWYgYmx1ciB0aGVuIGJsdXI6RGVzdHJveSgpIGVuZAogICAgZW5kKQplbmQKCi0tIE5o4bqlbiAiS2jDtG5nIiA9PiBLaWNrIG5nYXkKYnRuTm8uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBpZiBjbGlja2VkIHRoZW4gcmV0dXJuIGVuZAogICAgY2xpY2tlZCA9IHRydWUKICAgIGNsZWFudXBVSSgpCgogICAgLS0gVGjhu7FjIHRoaSBraWNrIChz4butYSBk4bqldSBuZ2/hurdjICsgxJHDs25nIGNodeG7l2kgY2hvIMSRw7puZykKICAgIGxwOktpY2soIlRhbyBS4bqldCDEkOG6uXAgVHJhaVxuKEVycm9yIENvZGU6IDk5OSkiKQplbmQpCgpidG5ZZXMuTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBpZiBjbGlja2VkIHRoZW4gcmV0dXJuIGVuZAogICAgY2xpY2tlZCA9IHRydWUKICAgIGNsZWFudXBVSSgpCgogICAgCiAgICBsb2NhbCBvaywgZXJyID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGxvY2FsIHVybCA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaG5jLXJvYmxveC9ITkMtSG9wL3JlZnMvaGVhZHMvbWFpbi9ITkNfSE9QX29iZi5sdWEiCiAgICAgICAgbG9jYWwgc3JjID0gZ2FtZTpIdHRwR2V0KHVybCkKICAgICAgICBsb2NhbCBmbiA9IGxvYWRzdHJpbmcoc3JjKQogICAgICAgIGlmIGZuIHRoZW4KICAgICAgICAgICAgZm4oKQogICAgICAgIGVsc2UKICAgICAgICAgICAgd2FybigiS2jDtG5nIHThuqFvIMSRxrDhu6NjIGjDoG0gdOG7qyBzY3JpcHQgdOG6o2kgduG7gS4iKQogICAgICAgIGVuZAogICAgZW5kKQogICAgaWYgbm90IG9rIHRoZW4KICAgICAgICB3YXJuKCJM4buXaSBraGkgY2jhuqF5IHNjcmlwdCBiw6puIG5nb8OgaTogIiwgZXJyKQogICAgZW5kCmVuZCkKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIChUdeG7syBjaOG7jW4pIMSRw7NuZyBHVUkgbuG6v3UgbmfGsOG7nWkgY2jGoWkgcmVzcGF3bgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpndWkuRW5hYmxlZCA9IHRydWU=]]
  local __abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  local function __dec(data)
    data = data:gsub('[^'..__abc..'=]', '')
    local bitstream = data:gsub('.', function(x)
      if x == '=' then return '' end
      local v = (__abc:find(x) or 1) - 1
      local bits = ''
      for i = 6, 1, -1 do
        bits = bits .. ((v % 2^i - v % 2^(i-1) > 0) and '1' or '0')
      end
      return bits
    end)
    local out = bitstream:gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
      if #x ~= 8 then return '' end
      local c = 0
      for i = 1, 8 do
        if x:sub(i,i) == '1' then
          c = c + 2^(8 - i)
        end
      end
      return string.char(c)
    end)
    return out
  end
  local __code = __dec(__b64)
  local __fn, __err = loadstring(__code, "TaoCoDepTraiKhong_obf")
  if not __fn then error(__err) end
  return __fn()
end
